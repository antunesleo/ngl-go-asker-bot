// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/antunesleo/ngl-go-asker-bot/askerbot (interfaces: QuestionAsker,TermAsker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockQuestionAsker is a mock of QuestionAsker interface.
type MockQuestionAsker struct {
	ctrl     *gomock.Controller
	recorder *MockQuestionAskerMockRecorder
}

// MockQuestionAskerMockRecorder is the mock recorder for MockQuestionAsker.
type MockQuestionAskerMockRecorder struct {
	mock *MockQuestionAsker
}

// NewMockQuestionAsker creates a new mock instance.
func NewMockQuestionAsker(ctrl *gomock.Controller) *MockQuestionAsker {
	mock := &MockQuestionAsker{ctrl: ctrl}
	mock.recorder = &MockQuestionAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuestionAsker) EXPECT() *MockQuestionAskerMockRecorder {
	return m.recorder
}

// AskQuestion mocks base method.
func (m *MockQuestionAsker) AskQuestion(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskQuestion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AskQuestion indicates an expected call of AskQuestion.
func (mr *MockQuestionAskerMockRecorder) AskQuestion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskQuestion", reflect.TypeOf((*MockQuestionAsker)(nil).AskQuestion), arg0, arg1)
}

// MockTermAsker is a mock of TermAsker interface.
type MockTermAsker struct {
	ctrl     *gomock.Controller
	recorder *MockTermAskerMockRecorder
}

// MockTermAskerMockRecorder is the mock recorder for MockTermAsker.
type MockTermAskerMockRecorder struct {
	mock *MockTermAsker
}

// NewMockTermAsker creates a new mock instance.
func NewMockTermAsker(ctrl *gomock.Controller) *MockTermAsker {
	mock := &MockTermAsker{ctrl: ctrl}
	mock.recorder = &MockTermAskerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTermAsker) EXPECT() *MockTermAskerMockRecorder {
	return m.recorder
}

// AskInput mocks base method.
func (m *MockTermAsker) AskInput(arg0 string, arg1 bool) (error, string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskInput", arg0, arg1)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	return ret0, ret1, ret2
}

// AskInput indicates an expected call of AskInput.
func (mr *MockTermAskerMockRecorder) AskInput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskInput", reflect.TypeOf((*MockTermAsker)(nil).AskInput), arg0, arg1)
}
